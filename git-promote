#!/usr/bin/env perl
#------------------------------------------------------------------------------
# $Id$
#------------------------------------------------------------------------------

use warnings;
use strict;

use constant TRUE  => (1 == 1);
use constant FALSE => (! TRUE);

use Getopt::Long;
#use Data::Dumper;

# Only default values different from FALSE must be listed here ...
my %OPTIONS = (
  pretty   => TRUE,
  interact => TRUE,
  restore  => TRUE
);

my %COLORS = (
  B => '[33;40m',
  I => '[30;42m',
  N => '[m',
  S => ' '
);

{ # -----[ main ]-----

  &ManageOptions();

  my $git = new GitPromote( verbose => ( $OPTIONS{verbose} ? 1 : 0 ),
                            chompArrays => TRUE );

  if ( exists($OPTIONS{author}) && ( $OPTIONS{author} =~ /^~/ ) ) {
    &Info( 'Getting author name' );
    my( $name, $email ) = $git->UserFromConfig( $OPTIONS{author} );
    my $author = $name;
    $author .= " <$email>" unless ( $email eq '' );
    die "No name/email for author '$OPTIONS{author}' !\n" if ( $author eq '' );
    print "Commit author will be\n$COLORS{B}$author$COLORS{N}\n";
    $OPTIONS{author} = $author;
  }

  unless ( $git->AliasExists('branch-order') ) {
    &RequireBranchOrder();
    exit 1;
  }

  my $start_br = $git->CurrentBranch;

  if ( ! $OPTIONS{message} ) {
    my $commit = $start_br;
    if ( $OPTIONS{continue} ) {
      &Info( 'Resuming previous invocation' );
      $OPTIONS{continue} = $commit = $git->NonMergeAncestor( $start_br );
      die "No previous invocation to resume !\n" if ( $commit eq $start_br );
    }
    my $msg = $git->log( '-1', '--pretty=%s', $commit );
    $msg =~ s/\s+\(cherry picked from commit [a-f\d]+\)//; # Drop cherry-pick
    print "The following commit-message will be used:\n",
          "$COLORS{B}$msg$COLORS{N}\n";
    unless ( $OPTIONS{continue} ) {
      my $ok = &AskConfirmation( 'Do you confirm the commit message ?', TRUE );
      exit 1 unless ( $ok ); # Answer is 'N'
    }
    $OPTIONS{message} = $msg;
  }

  if ( $^O eq 'msys' ) { # Only on WIN
    # Apparently, it seems that sometimes this command has problems when
    # run automatically instead of explicitly ... (but only on this OS)
    &Info( 'Compacting repository (if needed)' );
    $git->gc( '--auto' );
  }
  &Info( 'Fetching remote repository' );
  $git->fetch;

  &Info( 'Building branch sequence' );
  my $update_master;
  my @branch_list = $git->branch_order( $start_br );
  # Remove last branch from list if it is 'master'
  if ( $branch_list[$#branch_list] eq 'master' ) {
    pop @branch_list;
    $update_master = ( $#branch_list < 0 ? $start_br : $branch_list[$#branch_list] );
  }
  # Remove first branch from list, if it is the current one
  shift @branch_list if ( $#branch_list >= 0 && $branch_list[0] eq $start_br );

  my @from_prev_run = ();
  if ( $OPTIONS{continue} ) {
    &Info( 'Retrieving branches managed in previous invocation' );
    &BranchesFromPreviousRun( $git, $OPTIONS{continue}, $start_br,
                              \@branch_list, \@from_prev_run );
    print "No branch processed in previous run.\n" if ( $#from_prev_run < 0 );
  }

  if ( exists($OPTIONS{'already-in'}) || exists($OPTIONS{'skip-from'}) ) {
    my $stop_at = $OPTIONS{'already-in'} || $OPTIONS{'skip-from'};
    my $found = FALSE;
    for ( my $i=0; $i<=$#branch_list; ++$i ) {
      my $branch = $branch_list[$i];
      if ( $branch eq $stop_at ) { $#branch_list = $i; $found = TRUE; last; }
    } # END for
    die "Branch '$stop_at' not found or not in merge-list !\n" if ( ! $found );
  }

  &Info( 'Checking local tracking branches' );
  my $remote = $git->UpstreamBranch( $start_br );
  $remote =~ s!/$start_br$!!;

  my %tracked = $git->TrackedBranches( $remote );
  foreach my $br (@branch_list) {
    unless ( exists($tracked{$br}) ) {
      # Setup local tracking branch if not already present
      $git->branch( $br, "remotes/$remote/$br" );
    }
  } # END foreach


  my @opts = ( '--nofetch' );
  push( @opts, '--verbose' ) if ( $OPTIONS{verbose} );
  push( @opts, '--dryrun' ) if ( $OPTIONS{dryrun} );
  push( @opts, '--nopretty' ) unless ( $OPTIONS{pretty} );
  push( @opts, '--norestore' ) unless ( $OPTIONS{restore} );
  if ( $#branch_list >= 0 ) {
    my @seqMerge_opts = ( '-m', "'$OPTIONS{message}'" );
    push( @seqMerge_opts, '--edit' ) if ( $OPTIONS{edit} );
    push( @seqMerge_opts, '--nointeract' ) unless ( $OPTIONS{interact} );
    push( @seqMerge_opts, "--author='$OPTIONS{author}'" ) if ( $OPTIONS{author} );
    push( @seqMerge_opts, "--run='$OPTIONS{run}'" ) if ( $OPTIONS{run} );
    push( @seqMerge_opts, "--last-merge-opts='-X ours'" ) if ( $OPTIONS{'already-in'} );
    push( @seqMerge_opts, "--last-merge-opts='-s ours'" ) if ( $OPTIONS{'skip-from'} );
    &Info( 'Merging current branch', $start_br, 'into', join(', ',@branch_list) );
    $git->seq_merge( @opts, @seqMerge_opts, @branch_list ); # $git --dryrun(?)
  } else {
    &Info( 'Pushing current branch', $start_br );
    $git->synch( @opts, '--mode=push', $start_br ); # $git --dryrun(?)
  }

  if ( $#from_prev_run >= 0 ) {
    &Info( 'Pushing branches from previous run (', join(', ',@from_prev_run), ')' );
    $git->synch( @opts, '--mode=push', @from_prev_run ); # $git --dryrun(?)
  }

  if ( defined($update_master) ) {
    &Info( "Re-aligning 'master' to branch '$update_master'" );
    my $git_dry = $git->new( printOnly => $OPTIONS{dryrun} );
    $git_dry->ff_merge( 'master', $update_master );
    $git_dry->push( 'origin', 'master' );
  }

  print "\n\t$COLORS{I}$COLORS{S}... done.$COLORS{S}$COLORS{N}\n\n";

} # -----[ main ]-----

#==============================================================================

sub ManageOptions {
  # ----- Function code -----
  &GetOptions( \%OPTIONS,
               'verbose|v',
               'dryrun|dry-run|n',
               'pretty!',
               'interact!',
               'restore!',
               'continue',
               'edit|e',
               'run=s',
               'message|m=s',
               'author=s',
               'already-in=s',
               'skip-from=s',
               'help|h|?' ) or die "ERROR: option parsing failed!\n";
  #print &Dumper( \%OPTIONS );

  if ( $OPTIONS{help} ) {
    my( $program_name ) = ( $0 =~ m!([^/]+)$! );
    $program_name =~ s/^(git)-/$1 /;
    my $indent_space = ' ' x length($program_name);
    print STDERR "
  USAGE: $program_name [-v|--verbose] [-n|--dry[-]run] [--no[-]pretty]
         $indent_space [--no[-]interact] [--no[-]restore] [--continue]
         $indent_space [-e|--edit] [--run=<command>] [-m <msg>|--message=<msg>]
         $indent_space [--author=<name>] [--already-in=<br>|--skip-from=<br>]\n
     --verbose         : print each underlying git command before execution
     --dryrun          : just print git commands, but do not execute them
     --nopretty        : do not use ANSI colors to highlight step messages
     --nointeract      : avoid asking confirmations (assume everything OK)
     --norestore       : do not revert back to original branch (if changed)
     --continue        : resume a previously stopped '$program_name' execution
     --edit            : force editing of files with conflicts after merge
                         (normally this only happens if 'mergetool' fails)
     --run=<cmd>       : execute 'cmd' before committing each merge step
                         (if 'cmd' exits non-zero, the merge is aborted)
     --message=<msg>   : use <msg> as comment for merge commits
                         (default is to re-use the log message of last commit)
     --author=<auth>   : use '<auth>' as author of the merge commits
                         (you can also use '~<username>' as author, to take
                         name and e-mail from his/her 'git config')
     --already-in=<br> : when branch <br> is reached, do 'merge -X ours' and
                         stop (since change is ALREADY PRESENT in <br>)
     --skip-from=<br>  : when branch <br> is reached, do 'merge -s ours' and
                         stop (since change is NOT DESIRED in <br>).\n\n";
    exit 0;
  }

  if ( exists($OPTIONS{'already-in'}) && exists($OPTIONS{'skip-from'}) ) {
    die "Options '--already-in' and '--skip-from' are mutually exclusive !\n";
  }

  $COLORS{I} = $COLORS{B} = $COLORS{N} = $COLORS{S} = '' unless ( $OPTIONS{pretty} );
}

#==============================================================================

sub Info {
  print "\t$COLORS{I}$COLORS{S}@_ ...$COLORS{S}$COLORS{N}\n";
}

#==============================================================================

sub AskConfirmation {
  # ----- Function arguments -----
  my( $msg, $default ) = @_;
  # ----- Function code -----
  return $default unless ( $OPTIONS{interact} );
  while ( TRUE ) {
    printf '%s [Y/N] » ', $msg;
    if ( $OPTIONS{dryrun} ) {
      print '', ($default ? 'Y' : 'N'), " [dryrun]\n";
      return $default;
    }
    chomp( my $answer = <STDIN> );
    return TRUE  if ( $answer =~ /^y$/i );
    return FALSE if ( $answer =~ /^n$/i );
  } # END while
}

#==============================================================================

sub BranchesFromPreviousRun {
  # ----- Function arguments -----
  my( $git, $commit, $start_branch, $selected_branches, $branches_to_add ) = @_;
  # ----- Function code -----
  my @branches = $git->BranchesIncludingCommit( $commit );
  foreach my $new_br (@branches) {
    my $present = FALSE;
    foreach my $br ($start_branch, @{$selected_branches}, 'master') {
      if ( $br eq $new_br ) { $present = TRUE; last; }
    } # END foreach
    push( @{$branches_to_add}, $new_br ) unless ( $present );
  } # END foreach
}

#==============================================================================

sub RequireBranchOrder {
  # ----- Function code -----
  print STDERR "
     Sorry, no 'branch-order' command configured.
     You need to define a git-alias for this!.\n
     For example, if all your branches are named like 'Rx.y' and the order
     of branches can be obtained by numerically comparing the various
     dot-separated fields (in order), you can use:\n
        git config [--global] alias.branch-order 'seq-branch-dotted --prefix=R'\n
     If you use a prefix different from 'R' (or no prefix at all) you can
     simply adapt the above command.
     If, instead, the order of your branches can be obtained inspecting the
     file 'branch.config' in each branch, you can use:\n
        git config [--global] alias.branch-order 'seq-branch-config'\n
     Finally, you can even define your own branch-sorting command, if you need.
\n";
}

#==============================================================================
#==============================================================================

package GitPromote;

use IO::Handle;

use lib ( __FILE__ =~ m!^(.*)/[^\/]+$! );  # Next module can be in same dir
use base 'GitCmd';

use constant TRUE  => GitCmd::TRUE;
use constant FALSE => GitCmd::FALSE;

#------------------------------------------------------------------------------

sub UpstreamBranch {
  # ----- Function arguments -----
  my( $self, $branch ) = @_;
  # ----- Return value -----
  $self->rev_parse( '--abbrev-ref', "$branch\@{upstream}", '2>/dev/null' );
}

#------------------------------------------------------------------------------

sub BranchesIncludingCommit {
  # ----- Function arguments -----
  my( $self, $commit ) = @_;
  # ----- Local variables -----
  my @branches = ();
  # ----- Function code -----
  my $fh = new IO::Handle;
  my $safe_git = $self->new( stopOnErrors => FALSE );
  $safe_git->branch( $fh, '--contains', $commit, '2>/dev/null' );
    while ( my $line = <$fh> ) {
      next if ( $line =~ /\s->\s/);
      chomp( $line );
      $line =~ s/^\s*\*?\s*//;
      push( @branches, $line );
    }
  $safe_git->Close( $fh );
  # ----- Return value -----
  @branches;
}

#------------------------------------------------------------------------------

sub NonMergeAncestor {
  # ----- Function arguments -----
  my( $self, $commit ) = @_;
  # ----- Function code -----
  while ( TRUE ) {
    my @parents = $self->CommitParents( $commit );
    last if ( $#parents < 1 );
    $commit = $parents[$#parents]; # Last parent is the "remote", if a merge
  } # END while
  # ----- Return value -----
  $commit;
}

#------------------------------------------------------------------------------

sub CommitParents {
  # ----- Function arguments -----
  my( $self, $commit ) = @_;
  # ----- Local variables -----
  my @parents = ();
  # ----- Function code -----
  my $fh = new IO::Handle;
  $self->cat_file( $fh, '-p', $commit );
    while ( my $line = <$fh> ) {
      push( @parents, $1 ) if ( $line =~ /^parent\s+(\w+)\s*$/ );
    }
  $self->Close( $fh );
  # ----- Return value -----
  @parents;
}

#------------------------------------------------------------------------------

# The logic of this routine is based on the shell script found at:
# http://stackoverflow.com/questions/4950725/how-do-i-get-git-to-show-me-which-branches-are-tracking-what
sub TrackedBranches {
  # ----- Function arguments -----
  my( $self, $remote ) = @_;
  # ----- Local variables -----
  my %tracked = ();
  # ----- Function code -----
  my $safe_git = $self->new( stopOnErrors => FALSE );
  my $fh = new IO::Handle;
  $self->for_each_ref( $fh, "--format='%(refname:short)'", 'refs/heads' );
    while ( my $br = <$fh> ) {
      chomp( $br );
      my $upstr = $safe_git->UpstreamBranch( $br );
      next if ( $safe_git->KO );
      next unless ( $upstr =~ s!^$remote/!! );
      $tracked{$upstr} = $br;
    }
  $self->Close( $fh );
  # ----- Return value -----
  %tracked;
}

#------------------------------------------------------------------------------

sub CurrentBranch {
  # ----- Function arguments -----
  my( $self ) = @_;
  # ----- Function code -----
  my $current = $self->symbolic_ref( 'HEAD' );
  $current =~ s!^refs/heads/!!;
  # ----- Return value -----
  $current;
}

#------------------------------------------------------------------------------

sub UserFromConfig {
  # ----- Function arguments -----
  my( $self, $user ) = @_;
  # ----- Local variables -----
  my $name = '';
  my $email = '';
  # ----- Function code -----
  my $safe_git = $self->new( stopOnErrors => FALSE );
  my $fh = new IO::Handle;
  $safe_git->config( $fh, '--file', "$user/.gitconfig",
                          '--get-regexp', 'user\.[ne]' );
    while ( my $line = <$fh> ) {
      chomp( $line );
      $name  = $line if ( $line =~ s/^user\.name\s+// );
      $email = $line if ( $line =~ s/^user\.email\s+// );
    }
  $safe_git->Close( $fh );
  # ----- Return value -----
  ( $name, $email );
}

#------------------------------------------------------------------------------

sub AliasExists {
  # ----- Function arguments -----
  my( $self, $alias ) = @_;
  # ----- Function code -----
  my $safe_git = $self->new( stopOnErrors => FALSE );
  # Search git config-files for the given param (returns '' if not found)
  my $expansion = $safe_git->config( '--get', "alias.$alias" );
  # ----- Return value -----
  ( $expansion ne '' );
}

#------------------------------------------------------------------------------

# module return code
TRUE;

#==============================================================================
#==============================================================================
