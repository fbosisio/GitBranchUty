#!/usr/bin/env perl
#------------------------------------------------------------------------------
# $Id$
#------------------------------------------------------------------------------

use warnings;
use strict;

use constant TRUE  => (1 == 1);
use constant FALSE => (! TRUE);

use Getopt::Long;
#use Data::Dumper;

# Only default values different from FALSE must be listed here ...
my %OPTIONS = ( interact => TRUE );

my %COLORS = (
  I => '[33;40m',
  B => '[30;42m',
  N => '[m',
  S => ' '
);

{ # -----[ main ]-----

  my @cherry_pick_opts = ();
  my @commits_to_cherry_pick = ();
  &ManageOptions( \@commits_to_cherry_pick, \@cherry_pick_opts );

  # Here $git_r (R for "real") ALWAYS invokes the various git commands,
  # whereas $git_d (D for "dryrun") obeys the "--dryrun" option (run or print).
  # Finally $git_rs and $git_ds (S for "safe") are like $git_r and $git_d 
  # respectively, but do not fail on errors.
  my $git_r = new GitDoPick( verbose => ( $OPTIONS{verbose} ? 1 : 0 ) );
  my $git_d = $git_r->new( printOnly => $OPTIONS{dryrun} );
  my $git_rs = $git_r->new( stopOnErrors => FALSE );
  my $git_ds = $git_d->new( stopOnErrors => FALSE );

  my $curr_br = $git_r->CurrentBranch;

  my @hash_to_cherry_pick = ();
  foreach my $commit (@commits_to_cherry_pick) {
    my $short_hash = $git_rs->AbbrevHash( $commit );
    push( @hash_to_cherry_pick, $short_hash );
  }
  my $commits_list = join( "', '", @hash_to_cherry_pick );
  my $s = ( ($#hash_to_cherry_pick > 0) ? 's' : '' );

  my $add_x_opt = TRUE;
  foreach my $hash (@hash_to_cherry_pick) {
    my @upstr = $git_r->ContainingUpstreamBranches( $hash );
    if ( $#upstr < 0 ) { $add_x_opt = FALSE; last; }
  } # END foreach
  push( @cherry_pick_opts, '-x' ) if ( $add_x_opt );

  &Info( "Cherry-picking commit$s '$commits_list' on top of '$curr_br'" );
  $git_ds->cherry_pick( @cherry_pick_opts, @hash_to_cherry_pick );
  while ( $git_ds->KO ) {
    my @opts = ();
    push( @opts, '--verbose' ) if ( $OPTIONS{verbose} );
    push( @opts, '--dryrun' ) if ( $OPTIONS{dryrun} );
    push( @opts, '--pretty' ) if ( $OPTIONS{pretty} );
    push( @opts, '--nointeract' ) unless ( $OPTIONS{interact} );
    push( @opts, '--edit' ) if ( $OPTIONS{edit} );
    # Here we use "$git_rs" since we also pass "--dryrun" option (if present)
    $git_rs->resolve_conflicts( @opts );
    if ( $git_rs->KO ) {
      &Info( "Running 'git cherry-pick --abort' to undo the cherry-pick" );
      $git_d->cherry_pick( '--abort' );
      exit 1;
    }

    print "\nYou can now either:\n",
          " - $COLORS{B}continue$COLORS{N} the cherry-pick process\n",
          " - $COLORS{B}abort$COLORS{N} the whole cherry-pick process.\n";
    my $ans = &AskConfirmation( 'Continue with cherry-pick ?', TRUE );
    if ( $ans ) { # i.e. answer is 'Y'
#git commit --reuse-message=<commit>
      &Info( "Running 'git cherry-pick --continue' to resume the process" );
      $git_ds->cherry_pick( '--continue' );
    } else {
      print "OK, aborting.\n";
      &Info( "Running 'git cherry-pick --abort' to undo the cherry-pick" );
      $git_d->cherry_pick( '--abort' );
      exit 2;
    }
  } # END while

} # -----[ main ]-----

#==============================================================================

sub ManageOptions {
  # ----- Local variables -----
  my( $commits_to_cherry_pick, $options_for_cherry_pick ) = @_;
  # ----- Function code -----
  # Leave unrecognized options in ARGV, instead of flagging them as errors
  &Getopt::Long::Configure( 'pass_through' );

  &GetOptions( \%OPTIONS,
               'verbose|v',
               'dryrun|dry-run|n',
               'pretty',
               'interact!',
               'edit|e',
               'help|h|?' );
  #print &Dumper( \%OPTIONS );

  if ( $OPTIONS{help} ) {
    my( $program_name ) = ( $0 =~ m!([^/]+)$! );
    $program_name =~ s/^(git)-/$1 /;
    my $indent_space = ' ' x length($program_name);
    print STDERR "
  USAGE: $program_name [-v|--verbose] [-n|--dryrun|--dry-run] [--pretty]
         $indent_space [--nointeract] [-e|--edit] [<git-cherry-pick-options>]
         $indent_space <commits-to-cherry-pick>\n
         --verbose    : print each underlying git command before execution
         --dryrun     : just print git commands, but do not execute them
         --pretty     : use ANSI colors to highlight step messages
         --nointeract : avoid asking confirmations (assume everything OK)
         --edit       : force editing of files with conflicts after cherry-pick
                        (normally this only happens if 'mergetool' fails)\n
         All other options are passed along to 'git cherry-pick'.\n\n";
    exit 0;
  }

  $COLORS{I} = $COLORS{B} = $COLORS{N} = $COLORS{S} = '' unless ( $OPTIONS{pretty} );

  my $commit_found = FALSE;
  foreach my $arg (@ARGV) {
    if ( $arg =~ /^-/ ) {
      push( @{$options_for_cherry_pick}, $arg );
    } else {
      push( @{$commits_to_cherry_pick}, $arg );
      $commit_found = TRUE;
    }
  } # END foreach

  die "No <commit-to-cherry-pick> specified!\n" unless ( $commit_found );
}

#==============================================================================

sub Info {
  print "\t$COLORS{I}$COLORS{S}@_ ...$COLORS{S}$COLORS{N}\n";
}

#==============================================================================

sub AskConfirmation {
  # ----- Function arguments -----
  my( $msg, $default ) = @_;
  # ----- Function code -----
  return $default unless ( $OPTIONS{interact} );
  while ( TRUE ) {
    printf '%s [Y/N] » ', $msg;
    if ( $OPTIONS{dryrun} ) {
      print '', ($default ? 'Y' : 'N'), " [dryrun]\n";
      return $default;
    }
    chomp( my $answer = <STDIN> );
    return TRUE  if ( $answer =~ /^y$/i );
    return FALSE if ( $answer =~ /^n$/i );
  } # END while
}

#==============================================================================
#==============================================================================

package GitDoPick;

use IO::Handle;

use lib ( __FILE__ =~ m!^(.*)/[^\/]+$! );  # Next module can be in same dir
use base 'GitCmd';

use constant TRUE  => GitCmd::TRUE;
use constant FALSE => GitCmd::FALSE;

#------------------------------------------------------------------------------

sub CurrentBranch {
  # ----- Local variables -----
  my( $self ) = @_;
  # ----- Function code -----
  my $current = $self->symbolic_ref( 'HEAD' );
  $current =~ s!^refs/heads/!!;
  # ----- Return value -----
  $current;
}

#------------------------------------------------------------------------------

# N.B.: assumes $self->{stopOnErrors} is FALSE !!!
sub AbbrevHash {
  # ----- Function arguments -----
  my( $self, $ref ) = @_;
  # ----- Function code -----
  my $short_hash;
  my @hashes = $self->show_ref( '--hash=7', "'$ref'" );
  if ( $self->KO ) { 
    ( $short_hash ) = ( $ref =~ /^(\w{7})/ );
  } else {
    $short_hash = $hashes[0];
  }
  # ----- Return value -----
  $short_hash;
}

#------------------------------------------------------------------------------

sub UpstreamBranch {
  # ----- Function arguments -----
  my( $self, $branch ) = @_;
  # ----- Return value -----
  $self->rev_parse( '--abbrev-ref', "$branch\@{upstream}", '2>/dev/null' );
}

#------------------------------------------------------------------------------

# N.B.: assumes $self->{stopOnErrors} is FALSE !!!
sub ContainingUpstreamBranches {
  # ----- Function arguments -----
  my( $self, $commit ) = @_;
  # ----- Function code -----
  my @branches = $self->branch( '--contains', $commit, '2>/dev/null' );
  @branches = () if ( $self->KO ); # Probably redundant ...
  my @upstreams = ();
  foreach my $br (@branches) {
    my $upstr = $self->UpstreamBranch( $br );
    push( @upstreams, $upstr ) unless ( $self->KO );
  } # END foreach
  # ----- Return value -----
  @upstreams;
}

#------------------------------------------------------------------------------

sub CherryPickInProgress {
  # ----- Function arguments -----
  my( $self ) = @_;
  # ----- Function code -----
  my $git_dir = $self->rev_parse( '--git-dir' );
  # ----- Return value -----
  -f "$git_dir/CHERRY_PICK_HEAD";
}

#------------------------------------------------------------------------------

# module return code
TRUE;

#==============================================================================
#==============================================================================
