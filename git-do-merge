#!/usr/local/bin/perl -w
#------------------------------------------------------------------------------
# $Id$
#------------------------------------------------------------------------------

use strict;

use constant TRUE  => (1 == 1);
use constant FALSE => (! TRUE);

use Getopt::Long;
use IO::Handle;
#use Data::Dumper;

use lib ( __FILE__ =~ m!^(.*)/[^\/]+$! );  # Next module can be in same dir
use GitCmd;

# Only default values different from FALSE must be listed here ...
my %OPTIONS = ( interact => TRUE );

my %COLORS = (
  I => '[33;40m',
  B => '[30;42m',
  N => '[m',
  S => ' '
);

{ # -----[ main ]-----

  my $br_to_merge = undef;
  my @merge_opts = ();
  &ManageOptions( \$br_to_merge, \@merge_opts );

  # Here $git_r (R for "real") ALWAYS invokes the various git commands,
  # whereas $git_d (D for "dryrun") obeys the "--dryrun" option (run or print).
  # Finally $git_s (S for "safe") obeys "--dryrun" and does not fail on errors.
  my $git_r = new GitCmd( verbose => ( $OPTIONS{verbose} ? 1 : 0 ) );
  my $git_d = $git_r->new( printOnly => $OPTIONS{dryrun} );
  my $git_s = $git_d->new( stopOnErrors => FALSE );

  my $curr_br = &CurrentBranch( $git_r );

  my $ask_before_commit = FALSE;
  my $abort_merge = FALSE;

  &Info( "Merging branch '$br_to_merge' into '$curr_br'" );
  $git_s->merge( $br_to_merge, '--no-commit', @merge_opts );

  if ( $git_s->KO ) {
    $ask_before_commit = TRUE;
    $abort_merge = &ResolveConflicts( $git_r, $git_d, $git_s );
  }

  if ( $ask_before_commit ) {
    my $ans = FALSE;
    unless ( $abort_merge ) {
      print "\nYou can now $COLORS{B}commit$COLORS{N} the merge, leave it",
            " $COLORS{B}pending$COLORS{N} or $COLORS{B}abort$COLORS{N} it.\n";
      $ans = &AskConfirmation( 'Proceed with merge ?', TRUE );
      print "OK, aborting.\n" if ( ! $ans ); # i.e. answer is 'N'
    }
    if ( ! $ans ) { # i.e. answer is 'N'
      &AbortMerge( $git_d );
      exit 1;
    }
  }

  &Info( "Running 'git commit' to conclude merge" );
  my @commit_opts = ();
  if ( defined($OPTIONS{message}) ) {
    push( @commit_opts, ('-m', "'$OPTIONS{message}'") );
  } elsif ( ! $OPTIONS{interact} ) {
    push( @commit_opts, ('-m', "'Merged $br_to_merge into $curr_br'") );
  }
  if ( defined($OPTIONS{author}) ) {
    push( @commit_opts, ('--author', "'$OPTIONS{author}'") );
  }
  $git_d->commit( @commit_opts );

} # -----[ main ]-----

#==============================================================================

sub ResolveConflicts {
  # ----- Function arguments -----
  my( $git_r, $git_d, $git_s ) = @_;
  # ----- Local variables -----
  my $abort_merge = FALSE;
  # ----- Function code -----
  &Info( "Running 'git mergetool' to resolve conflicts" );
  $git_s->mergetool;

  my $edit_files = $git_s->KO || $OPTIONS{edit};

  my( $output, $merged, $conflicts ) = &ParseGitStatus( $git_r );

  if ( ! $edit_files ) {
    &Info( "Showing 'git status'" );
    print $output;
    $output = undef; # To avoid showing it again below
    if ( $#{$conflicts} >= 0 ) {
      $edit_files = &AskConfirmation( 'Do you want to edit merged files ?',
                                      FALSE );
    }
  }

  if ( $edit_files ) {
    my $editor = $git_r->var( 'GIT_EDITOR' );
    $editor = "echo $editor" if ( $OPTIONS{dryrun} );
    foreach my $file (@{$conflicts}) {
      system( "$editor $file" ) == 0 or warn "WARNING: failed to edit '$file'.";
    } # END foreach

    my $ans = &AskConfirmation( 'Was editing OK ?', TRUE );
    $git_d->add( @{$conflicts} ) if ( $ans );

    ( $output, $merged, $conflicts ) = &ParseGitStatus( $git_d );
  }

  if ( defined($output) ) {
    &Info( "Showing 'git status'" );
    print $output;
  }
  if ( $#{$conflicts} >= 0 ) {
    print "\nThere are still unresolved conflicts! Abort forced.\n";
    $abort_merge = TRUE;
  }
  # ----- Return value -----
  $abort_merge;
}

#==============================================================================

sub AbortMerge {
  # ----- Function arguments -----
  my( $git_d ) = @_;
  # ----- Function code -----
  print "What do you want to do with current merge?\n" .
        " - cancel it (you need to REDO the merge manually then !)\n" .
        " - leave it pending (you can make changes and commit the merge).\n";
  my $ans = &AskConfirmation( 'Undo merge and revert to original state ?', TRUE );
  if ( $ans ) { # Answer is 'Y'
    &Info( "Undoing merge with 'git merge --abort'" );
    $git_d->merge( '--abort' );
    &Info( "Re-showing 'git status'" );
    $git_d->status;
  } else {  # Answer is 'N'
    print "\nWARNING: leaving the merge pending as requested !\n" .
          "\t (complete with \"git commit\" or undo with \"git merge --abort\")\n\n";
  }
}

#==============================================================================

sub ManageOptions {
  # ----- Local variables -----
  my( $branch_to_merge, $options_for_merge ) = @_;
  # ----- Function code -----
  # Leave unrecognized options in ARGV, instead of flagging them as errors
  &Getopt::Long::Configure( 'pass_through' );

  &GetOptions( \%OPTIONS,
               'verbose|v',
               'dryrun|dry-run|n',
               'pretty',
               'interact!',
               'edit|e',
               'message|m=s',
               'author=s',
               'help|h|?' );
  #print &Dumper( \%OPTIONS );

  if ( $OPTIONS{help} ) {
    my( $program_name ) = ( $0 =~ m!([^/]+)$! );
    $program_name =~ s/^(git)-/$1 /;
    my $indent_space = ' ' x length($program_name);
    print STDERR "
  USAGE: $program_name [-v|--verbose] [-n|--dryrun|--dry-run] [--pretty]
         $indent_space [--nointeract] [-e|--edit] [-m <msg>|--message=<msg>]
         $indent_space [--author=<name>] [<git-merge-options>] <branch-to-merge>\n
         --verbose    : print each underlying git command before execution
         --dryrun     : just print git commands, but do not execute them
         --pretty     : use ANSI colors to highlight step messages
         --nointeract : avoid asking confirmations (assume everything OK)
         --edit       : force editing of files with conflicts after merge
                        (normally this only happens if 'mergetool' fails)
         --message    : use <msg> as comment for merge commit (if not ff)
         --author     : use <name> as author of the merge commit (if not ff)\n
         All other options are passed along to 'git merge'.\n\n";
    exit 0;
  }

  $COLORS{I} = $COLORS{B} = $COLORS{N} = $COLORS{S} = '' unless ( $OPTIONS{pretty} );

  my $branch_found = FALSE;
  foreach my $arg (@ARGV) {
    if ( $branch_found || $arg =~ /^-/ ) {
      push( @{$options_for_merge}, $arg );
    } else {
      ${$branch_to_merge} = $arg;
      $branch_found = TRUE;
    }
  } # END foreach

  die "No <branch-to-merge> specified!\n" unless ( $branch_found );
}

#==============================================================================

sub CurrentBranch {
  # ----- Local variables -----
  my( $git ) = @_;
  # ----- Function code -----
  my $current = $git->symbolic_ref( 'HEAD' );
  $current =~ s!^refs/heads/!!;
  # ----- Return value -----
  $current;
}

#==============================================================================

sub ParseGitStatus {
  # ----- Local variables -----
  my( $git ) = @_;
  # ----- Local variables -----
  my $output = ();
  my @merged = ();
  my @conflicts = ();
  my $fh = new IO::Handle;
  # ----- Function code -----
  $git->status( $fh, '--untracked-files=no' );
  while ( my $line = <$fh> ) {
    $output .= $line;
    push( @merged, $1 ) if ( $line =~ /(?:modified|new file):\s+(\S.+)/ );
    push( @conflicts, $1 ) if ( $line =~ /both modified:\s+(\S.+)/ );
  }
  $git->Close( $fh );
  # ----- Return value -----
  ( $output, \@merged, \@conflicts );
}

#==============================================================================

sub Info {
  print "\t$COLORS{I}$COLORS{S}@_ ...$COLORS{S}$COLORS{N}\n";
}

#==============================================================================

sub AskConfirmation {
  # ----- Function arguments -----
  my( $msg, $default ) = @_;
  # ----- Function code -----
  return $default unless ( $OPTIONS{interact} );
  while ( TRUE ) {
    printf '%s [Y/N] » ', $msg;
    if ( $OPTIONS{dryrun} ) {
      print '', ($default ? 'Y' : 'N'), " [dryrun]\n";
      return $default;
    }
    chomp( my $answer = <STDIN> );
    return TRUE  if ( $answer =~ /^y$/i );
    return FALSE if ( $answer =~ /^n$/i );
  } # END while
}

#==============================================================================
