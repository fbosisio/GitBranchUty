#!/usr/bin/env perl
#------------------------------------------------------------------------------
# $Id$
#------------------------------------------------------------------------------

use warnings;
use strict;

use constant TRUE  => (1 == 1);
use constant FALSE => (! TRUE);

use Getopt::Long;
#use Data::Dumper;

# Only default values different from FALSE must be listed here ...
my %OPTIONS = ( interact => TRUE );

my %COLORS = (
  I => '[33;40m',
  B => '[30;42m',
  N => '[m',
  S => ' '
);

{ # -----[ main ]-----

  my $br_to_rebase = undef;
  my @rebase_opts = ();
  &ManageOptions( \$br_to_rebase, \@rebase_opts );

  # Here $git_r (R for "real") ALWAYS invokes the various git commands,
  # whereas $git_d (D for "dryrun") obeys the "--dryrun" option (run or print).
  # Finally $git_rs and $git_ds (S for "safe") are like $git_r and $git_d 
  # respectively, but do not fail on errors.
  my $git_r = new GitDoRebase( verbose => ( $OPTIONS{verbose} ? 1 : 0 ) );
  my $git_d = $git_r->new( printOnly => $OPTIONS{dryrun} );
  my $git_rs = $git_r->new( stopOnErrors => FALSE );
  my $git_ds = $git_d->new( stopOnErrors => FALSE );

  &Info( 'Checking "git status" [this may take a while]' );
  my $starting_clean = $git_r->StatusIsClean;
  unless ( $starting_clean ) {
    &Info( 'Stashing local changes' );
    $git_d->stash( 'save' );
    &Info( 'Checking "git status" again (for safety)' );
    die "git status is not clean after git stash!\n" if ( !$git_d->StatusIsClean );
  }

  my $curr_br = $git_r->CurrentBranch;

  &Info( "Rebasing branch '$curr_br' on top of '$br_to_rebase'" );
  $git_ds->rebase( $br_to_rebase, @rebase_opts );
  while ( $git_ds->KO ) {
    my @opts = ();
    push( @opts, '--verbose' ) if ( $OPTIONS{verbose} );
    push( @opts, '--dryrun' ) if ( $OPTIONS{dryrun} );
    push( @opts, '--pretty' ) if ( $OPTIONS{pretty} );
    push( @opts, '--nointeract' ) unless ( $OPTIONS{interact} );
    push( @opts, '--edit' ) if ( $OPTIONS{edit} );
    # Here we use "$git_rs" since we also pass "--dryrun" option (if present)
    $git_rs->resolve_conflicts( @opts );
    if ( $git_rs->KO ) {
      &Info( "Running 'git rebase --abort' to undo the rebase" );
      $git_d->rebase( '--abort' );
      unless ( $starting_clean ) {
        &Info( 'Restoring stashed changes' );
        $git_d->stash( 'pop' );
      }
      exit 1;
    }

    print "\nYou can now either\n",
         " - $COLORS{B}continue$COLORS{N} the rebase process\n",
         " - $COLORS{B}skip$COLORS{N} this commit and continue with next one\n",
         " - $COLORS{B}abort$COLORS{N} the whole rebase process.\n";
    my $ans = &AskConfirmation( 'Continue with rebase ?', TRUE );
    if ( $ans ) { # i.e. answer is 'Y'
      &Info( "Running 'git rebase --continue' to resume the process" );
      $git_ds->rebase( '--continue' );
    } else {
      $ans = &AskConfirmation( 'Skip commit and continue ?', TRUE );
      if ( $ans ) { # i.e. answer is 'Y'
        &Info( "Running 'git rebase --skip' to proceed with next commit" );
        $git_d->rebase( '--skip' );
      } else {
        print "OK, aborting.\n";
        &Info( "Running 'git rebase --abort' to undo the rebase" );
        $git_d->rebase( '--abort' );
        unless ( $starting_clean ) {
          &Info( 'Restoring stashed changes' );
          $git_d->stash( 'pop' );
        }
        exit 2;
      }
    }
  } # END while

  unless ( $starting_clean ) {
    &Info( 'Restoring stashed changes' );
    $git_d->stash( 'pop' );
  }

} # -----[ main ]-----

#==============================================================================

sub ManageOptions {
  # ----- Local variables -----
  my( $branch_to_rebase, $options_for_rebase ) = @_;
  # ----- Function code -----
  # Leave unrecognized options in ARGV, instead of flagging them as errors
  &Getopt::Long::Configure( 'pass_through' );

  &GetOptions( \%OPTIONS,
               'verbose|v',
               'dryrun|dry-run|n',
               'pretty',
               'interact!',
               'edit|e',
               'help|h|?' );
  #print &Dumper( \%OPTIONS );

  if ( $OPTIONS{help} ) {
    my( $program_name ) = ( $0 =~ m!([^/]+)$! );
    $program_name =~ s/^(git)-/$1 /;
    my $indent_space = ' ' x length($program_name);
    print STDERR "
  USAGE: $program_name [-v|--verbose] [-n|--dryrun|--dry-run] [--pretty]
         $indent_space [--nointeract] [-e|--edit] [<git-rebase-options>]
         $indent_space <branch-to-rebase>\n
         --verbose    : print each underlying git command before execution
         --dryrun     : just print git commands, but do not execute them
         --pretty     : use ANSI colors to highlight step messages
         --nointeract : avoid asking confirmations (assume everything OK)
         --edit       : force editing of files with conflicts after rebase
                        (normally this only happens if 'mergetool' fails)\n
         All other options are passed along to 'git rebase'.\n\n";
    exit 0;
  }

  $COLORS{I} = $COLORS{B} = $COLORS{N} = $COLORS{S} = '' unless ( $OPTIONS{pretty} );

  my $branch_found = FALSE;
  foreach my $arg (@ARGV) {
    if ( $branch_found || $arg =~ /^-/ ) {
      push( @{$options_for_rebase}, $arg );
    } else {
      ${$branch_to_rebase} = $arg;
      $branch_found = TRUE;
    }
  } # END foreach

  die "No <branch-to-rebase> specified!\n" unless ( $branch_found );
}

#==============================================================================

sub Info {
  print "\t$COLORS{I}$COLORS{S}@_ ...$COLORS{S}$COLORS{N}\n";
}

#==============================================================================

sub AskConfirmation {
  # ----- Function arguments -----
  my( $msg, $default ) = @_;
  # ----- Function code -----
  return $default unless ( $OPTIONS{interact} );
  while ( TRUE ) {
    printf '%s [Y/N] » ', $msg;
    if ( $OPTIONS{dryrun} ) {
      print '', ($default ? 'Y' : 'N'), " [dryrun]\n";
      return $default;
    }
    chomp( my $answer = <STDIN> );
    return TRUE  if ( $answer =~ /^y$/i );
    return FALSE if ( $answer =~ /^n$/i );
  } # END while
}

#==============================================================================
#==============================================================================

package GitDoRebase;

use IO::Handle;

use lib ( __FILE__ =~ m!^(.*)/[^\/]+$! );  # Next module can be in same dir
use base 'GitCmd';

use constant TRUE  => GitCmd::TRUE;
use constant FALSE => GitCmd::FALSE;

#------------------------------------------------------------------------------

sub CurrentBranch {
  # ----- Local variables -----
  my( $self ) = @_;
  # ----- Function code -----
  my $current = $self->symbolic_ref( 'HEAD' );
  $current =~ s!^refs/heads/!!;
  # ----- Return value -----
  $current;
}

#------------------------------------------------------------------------------

sub RebaseInProgress {
  # ----- Function arguments -----
  my( $self ) = @_;
  # ----- Function code -----
  my $git_dir = $self->rev_parse( '--git-dir' );
  # ----- Return value -----
  ##-f "$git_dir/REBASE_HEAD";
  -d "$git_dir/rebase-merge" or -d "$git_dir/rebase-apply";
}

#------------------------------------------------------------------------------

sub StatusIsClean {
  # ----- Function arguments -----
  my( $self ) = @_;
  # ----- Local variables -----
  my @status = ();
  # ----- Function code -----
  my $fh = new IO::Handle;
  $self->status( $fh, '--untracked-files=no' );
    while ( my $line = <$fh> ) {
      if ( $line =~ /nothing\s+to\s+commit/ ) { @status = (); last; }
      push( @status, $line );
    }
  $self->Close( $fh );
  # Print command-output (if status is clean, list is empty so print nothing)
  foreach my $line (@status) { print $line; }
  # ----- Return value -----
  ( $#status < 0 );
}

#------------------------------------------------------------------------------

# module return code
TRUE;

#==============================================================================
#==============================================================================
